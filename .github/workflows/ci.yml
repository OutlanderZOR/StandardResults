name: CI & Publish

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'          # e.g. v1.2.3
      - 'v*.*.*-*'        # e.g. v1.2.3-beta.1
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # useful for SourceLink and versioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      - name: Test (with coverage)
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Publish coverage summary
        if: always()
        run: |
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          COVERAGE_FILE=$(find TestResults -name 'coverage.cobertura.xml' | head -n 1 || true)
          if [ -n "$COVERAGE_FILE" ]; then
            echo "Coverage file: $COVERAGE_FILE" >> $GITHUB_STEP_SUMMARY
          else
            echo "No coverage file found." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test results (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x

      - name: Determine Version from Tag
        id: version
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"   # e.g., v1.2.3 or v1.2.3-beta.1
          # Strip leading 'v'
          VERSION="${TAG#v}"

          # Basic SemVer validation: 1.2.3 or 1.2.3-prerelease.1+build
          if [[ ! "$VERSION" =~ ^[0-9]+(\.[0-9]+){2}(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$ ]]; then
            echo "Tag '${TAG}' is not valid semver (vMAJOR.MINOR.PATCH[-prerelease][+build])." >&2
            exit 1
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Restore
        run: dotnet restore

      - name: Pack
        run: |
          dotnet pack ./src/StandardResults/StandardResults.csproj \
            --configuration Release \
            --no-restore \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:ContinuousIntegrationBuild=true

      - name: Push to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          # Push both .nupkg and .snupkg
          dotnet nuget push "**/bin/Release/*.nupkg" \
            --api-key "$NUGET_API_KEY" \
            --source "https://api.nuget.org/v3/index.json" \
            --skip-duplicate

          dotnet nuget push "**/bin/Release/*.snupkg" \
            --api-key "$NUGET_API_KEY" \
            --source "https://api.nuget.org/v3/index.json" \
            --skip-duplicate